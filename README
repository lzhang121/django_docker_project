##Day01
1、使用docker-compose部署django+postgres+redis+ngix
   - 创建docker-compose.yml文件
   - 配置PostgreSQL数据库
   - 配置Redis缓存
   - 配置Nginx作为反向代理
   - 配置Django应用
2、使用docker-compose命令启动和停止服务
   - 启动服务：`docker-compose up -d`
   - 停止服务：`docker-compose down`
   - 查看服务状态：`docker-compose ps`
   - 查看日志：`docker-compose logs`
   - 重启服务：`docker-compose restart`
   - 查看容器的IP地址：`docker inspect <container_id> | grep IPAddress`
   - 进入容器：`docker exec -it <container_id> /bin/bash`
   - 查看容器内的文件：`docker exec -it <container_id> ls /path/to/directory`
   - 进入PostgreSQL容器：`docker exec -it <postgres_container_id> psql -U <username> -d <database>`
   - 进入Redis容器：`docker exec -it <redis_container_id> redis-cli`
   - 进入Django容器：`docker exec -it <django_container_id> /bin/bash`
   - 进入Nginx容器：`docker exec -it <nginx_container_id> /bin/bash`
   - 查看Django应用的运行状态：`docker exec -it <django_container_id> python manage.py runserver`
   - 查看PostgreSQL数据库状态：`docker exec -it <postgres_container_id> pg_isready`
3、使用github的方式管理代码
   - 创建GitHub仓库
   - 将本地代码推送到GitHub
   - 配置.gitignore文件忽略不必要的文件
4、django瘦身，注释掉暂时不用的插件
   - 在`settings.py`中注释掉不需要的应用
   - 删除不必要的静态文件和模板文件
   - 优化数据库查询，使用`select_related`和`prefetch_related`
   - 使用Django的缓存机制减少数据库查询
   - 压缩静态文件，使用`django-compressor`
   - 移除不必要的中间件

##Day02
1、本地调试，也能容器构建运行」的双开发环境
   - 在本地安装Django和相关依赖
   - 使用`docker-compose restart web`重启容器环境或者`docker-compose up -d --build web`重新构建容器
   - 使用`python manage.py runserver`启动Django本地开发服务器
2、创建一个视图index.html
   - 在Django应用的`templates`目录下创建`index.html`
   - 在视图函数中渲染该模板
   - 配置URL路由指向该视图函数

##Day03
1、传统的路由设置urls.py引入views.py中方法
2、带参数的路由设置content/<int:cid>
3、带参数的路由设置article/?aid=1

##Day04
1、路由转发功能
2、路由include功能
   - 使用`include()`函数将其他URL配置文件包含到主URL配置中
   - 创建一个新的应用并配置其URL路由
   - 在主URL配置中使用`include()`引入新应用的URL配置
3、路由正则表达式
   - 使用正则表达式定义更复杂的路由规则
   - 在URL配置中使用`re_path()`函数
   - 捕获路由参数并传递给视图函数

##Day05
1、程序可以在运行时动态地获取对象的信息，并操作对象的属性或方法
   - 使用`getattr()`函数获取对象的属性
   - 使用`setattr()`函数设置对象的属性
   - 使用`hasattr()`函数检查对象是否具有某个属性
   - 使用`callable()`函数检查对象是否可调用
   - 使用`dir()`函数获取对象的所有属性和方法列表

##Day06
1、别名存在的意义
   - 提供更简洁的引用方式
   - 避免命名冲突
   - 增强代码可读性
   - 方便模块重命名或重构

##Day07
1、APPEND_FLASH=False
   - 在Django中配置`APPEND_FLASH=False`可以防止闪存消息在重定向后被追加到响应中
   - 这有助于避免重复显示相同的闪存消息
2、APPEND_SLASH=True
   - 在Django中配置`APPEND_SLASH=True`可以自动在没有斜杠的URL后添加斜杠
   - 这有助于避免因缺少斜杠而导致的404错误
3、functools.partial偏函数
   - 使用`functools.partial`可以创建一个新的函数，该函数固定了某些参数
   - 这有助于简化函数调用，特别是在需要多次调用同一函数但参数不同的情况下
   - 示例：`from functools import partial; new_func = partial(original_func, arg1, arg2)`